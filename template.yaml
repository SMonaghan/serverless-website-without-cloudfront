AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  word-game

  SAM Template for word-game

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  S3BucketName:
    Type: String
    Description: Name of bucket hosting website static content
  WebsiteDomainName:
    Type: String
    Description: Domain name of the website
  HostedZoneId:
    Type: String
    Default: NONE
    Description: The hosted zone for the custom domain name.  If this is provided, you do not need to provide a Hosted Zone domain
  HostedZoneDomain:
    Type: String
    Default: NONE
    Description: Domain for hosted zone
  WebsiteCertificateARN:
    Type: String
    Default: NONE
    Description: ARN of the certificate for the website

Conditions:
  CreateHostedZone: !Equals 
    - !Ref HostedZoneId
    - NONE
  CreateCertificate: !Equals 
    - !Ref WebsiteCertificateARN
    - NONE

Resources:
  DNS: 
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: !Ref HostedZoneDomain
    Condition: CreateHostedZone
  WebsiteCertificate: 
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref WebsiteDomainName
      ValidationMethod: DNS
    Condition: CreateCertificate
    DependsOn: DNS
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketName
                - /*
            Principal: 
              AWS: !GetAtt APIGWS3Role.Arn
          - Action:
              - 's3:GetObject'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketName
                - /*
            Principal: '*'
            Condition:
              StringNotLike:
                "aws:userId":
                  - !Sub
                    - '${roleId}:*'
                    - roleId: !GetAtt APIGWS3Role.RoleId
                  - ${AWS::AccountId}

  LambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  APIGWDDBRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  APIGWS3Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  APIGWDDBQueryPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "DDBQueryPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: DDBQueryPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !Sub
              - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
              - tableName: !Ref SolverTable
      Roles: 
        - Ref: "APIGWDDBRole"
        - Ref: "LambdaRole"
  LambdaPutItemPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "LambdaPutItemPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: LambdaPutItemPolicy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !Sub
              - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
              - tableName: !Ref SolverTable
      Roles: 
        - Ref: "LambdaRole"
  APIGWS3GetObjectPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "APIGWS3GetObjectPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: APIGWS3GetObjectPolicy
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 
                - arn:aws:s3:::${bucketName}/*
                - bucketName: !Ref S3BucketName
      Roles: 
        - Ref: "APIGWS3Role"
  SolverTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: &table_name SolverTable
      AttributeDefinitions:
        - AttributeName: &pk PK
          AttributeType: S
      KeySchema:
        - AttributeName: *pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: &ttl EntryTTL
        Enabled: True
  SolverApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: test
      Cors:
        AllowMethods: "'POST, GET, DELETE, OPTIONS'"
        AllowHeaders: "'X-Forwarded-For'"
        AllowOrigin: !Sub
          - "'https://${domainName}'"
          - domainName: !Ref WebsiteDomainName
        MaxAge: "'600'"
        AllowCredentials: true
      Models:
        Empty:
          "$schema": "http://json-schema.org/draft-04/schema#"
          title: "Empty Schema"
          type: "object"
          properties:
            empty:
              type: string
      BinaryMediaTypes:
        - 'image/*'
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: !Ref WebsiteDomainName
        CertificateArn: !If [CreateCertificate, !Ref WebsiteCertificate, !Ref WebsiteCertificateARN]
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !If [CreateHostedZone, !Ref DNS, !Ref HostedZoneId]
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "word-game"
          version: "1.0"
        servers:
          - url: "https://api.serverless.i.journalctl.xyz/{basePath}"
            variables:
              basePath:
                default: "/solve"
          - url: "https://solver.serverless.i.journalctl.xyz/"
        paths:
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  content:
                    text/html:
                      schema:
                        $ref: "#/components/schemas/empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGWS3Role.Arn
                httpMethod: "GET"
                uri: !Sub
                  - "arn:aws:apigateway:us-east-1:s3:path/${bucketName}/index.html"
                  - bucketName: !Ref S3BucketName
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                type: "aws"
          /{proxy+}:
            get:
              parameters:
              - name: "Content-Type"
                in: "header"
                schema:
                  type: "string"
              - name: "proxy"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: !GetAtt APIGWS3Role.Arn
                httpMethod: "GET"
                uri: !Sub
                  - "arn:aws:apigateway:us-east-1:s3:path/${bucketName}/{proxy}"
                  - bucketName: !Ref S3BucketName
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                requestParameters:
                  integration.request.path.proxy: "method.request.path.proxy"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "v8ky6p"
                cacheKeyParameters:
                - "method.request.path.proxy"
          /word-solver:
            get:
              parameters:
              - name: "Cookie"
                in: "header"
                schema:
                  type: "string"
              responses:
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                  content: {}
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGWDDBRole.Arn
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-east-1:dynamodb:action/GetItem"
                responses:
                  "4\\d{2}":
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
                      method.response.header.Access-Control-Allow-Origin: !Sub
                        - "'https://${domainName}'"
                        - domainName: !Ref WebsiteDomainName
                    responseTemplates:
                      text/plain: "You need to guess before you can get possible results"
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
                      method.response.header.Access-Control-Allow-Origin: !Sub
                        - "'https://${domainName}'"
                        - domainName: !Ref WebsiteDomainName
                    responseTemplates:
                      application/json: "#set($inputRoot = $input.path('$.Item'))\n{\
                        \"correct\": $inputRoot.correct.S,\n    \"incorrect\": $inputRoot.incorrect.S,\n\
                        \    \"misplaced\": $inputRoot.misplaced.S,\n    \"remaining_words\"\
                        : $inputRoot.remaining_words.S\n    \"ranked_letters\": $inputRoot.ranked_letters.S}"
                requestParameters:
                  integration.request.header.Cookie: "method.request.header.Cookie"
                requestTemplates:
                  application/json: "{\n    \"TableName\": \"SolverTable\",\n    \"Key\":\
                    \ {\n        \"PK\": {\n            \"S\": \"$input.params('Cookie').replace('sessionId=',\
                    \ '')\"\n        }\n    }\n}"
                passthroughBehavior: "when_no_templates"
                type: "aws"
            post:
              parameters:
              - name: "Cookie"
                in: "header"
                schema:
                  type: "string"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub
                  - "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                  - lambdaArn: !GetAtt SolverFunction.Arn
                passthroughBehavior: "when_no_match"
                type: "aws_proxy"
            delete:
              parameters:
              - name: "Cookie"
                in: "header"
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                    Set-Cookie:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
                      method.response.header.Set-Cookie: "'sessionId=;Secure;HttpOnly;Expires=Thu,\
                        \ 01 Jan 1970 00:00:01 GMT;Path=/'"
                      method.response.header.Access-Control-Allow-Origin: !Sub
                        - "'https://${domainName}'"
                        - domainName: !Ref WebsiteDomainName
                    responseTemplates:
                      application/json: "{\"message\": \"OK mock response\"}"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                    Access-Control-Max-Age:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Max-Age: "'600'"
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
                      method.response.header.Access-Control-Allow-Methods: "'POST, GET, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'X-Forwarded-For'"
                      method.response.header.Access-Control-Allow-Origin: !Sub
                        - "'https://${domainName}'"
                        - domainName: !Ref WebsiteDomainName
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
        components: {}
  SolverFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: solver/
      Handler: index.lambda_handler
      Runtime: python3.9
      Architectures:
        - arm64
      Environment:
        Variables:
          DYNAMODB_TABLE: *table_name
          DYNAMODB_PK: *pk
          DYNAMODB_TTL: *ttl
          DOMAIN: !Sub
            - 'https://${domainName}'
            - domainName: !Ref WebsiteDomainName
      Timeout: 5
      Role: !GetAtt LambdaRole.Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /word-solver
            Method: post
            RequestParameters:
              - method.request.header.Cookie:
                  Required: false
            RestApiId:
              Ref: SolverApi
